/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DownloadDialog.java
 *
 * Created on 14 Nov, 2010, 11:13:05 AM
 */

package net.sf.jsharing.boundary;

import java.awt.Component;
import javax.swing.JPanel;
import net.sf.jsharing.components.TransferrableObject;

/**
 *
 * @author Pratik
 */
public class DownloadDialog extends javax.swing.JFrame {
    private static DownloadDialog dd;
    private int tabsDownloding = 0;

    /** Creates new form DownloadDialog */
    private DownloadDialog() {
        initComponents();

        this.setLocationRelativeTo(null);
    }

    public static DownloadDialog getDD() {
        if(dd == null)
            dd = new DownloadDialog();
        return dd;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setTitle("Download Dialog- JSharing");

        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setString("6 Tabs Downloading");
        jProgressBar1.setStringPainted(true);

        jLabel1.setText("No Tab Active");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    public void addDownloadRequest(TransferrableObject to) {
        DownloadPanel dp = new DownloadPanel(to);
        NewRequestDialog.getNewRequestDialog().addRequestPanel(dp);

        this.jTabbedPane1.addTab(to.getComputerName(), dp);
        this.jTabbedPane1.setSelectedComponent(dp);

        showDialog();
    }

    public void removePanel(JPanel p) {
        jTabbedPane1.remove(p);
        closingLogic();
    }

    public void focusOnPanel(JPanel p) {
        jTabbedPane1.setSelectedComponent(p);
    }

    private void closingLogic() {
        if(jTabbedPane1.getTabCount() == 0)
            closeDialog();
    }

    public void showDialog() {
        if(!this.isVisible())
            this.setVisible(true);
        toggleProgressBar();
        this.pack();
    }

    public void closeDialog() {
        if(this.isVisible())
            this.setVisible(false);
    }

    public void startDownloading(JPanel p) {
        tabsDownloding++;
        toggleProgressBar();

        int i = 0;
        for(Component c : jTabbedPane1.getComponents()) {
            if(c == p) {
                jTabbedPane1.setTitleAt(i, "<html><body><b>" + jTabbedPane1.getTitleAt(i) + " *</b></body></html>");
                break;
            }
            i++;
        }
    }

    public void stopDownloading(JPanel p) {
        tabsDownloding--;
        toggleProgressBar();

        int i = 0;
        for(Component c : jTabbedPane1.getComponents()) {
            if(c == p) {
                String newTitle = jTabbedPane1.getTitleAt(i);
                newTitle = newTitle.replaceAll("<html><body><b>", "");
                newTitle = newTitle.replaceAll("</b></body></html>", "");
                jTabbedPane1.setTitleAt(i, newTitle.substring(0, newTitle.length() - 2));
                break;
            }
            i++;
        }
    }

    private void toggleProgressBar() {
        if(tabsDownloding == 0) {
            this.jProgressBar1.setVisible(false);
            this.jLabel1.setVisible(true);
        } else {
            String append = " Downloading";
            if(tabsDownloding == 1)
                append = " Tab" + append;
            else
                append = " Tabs" + append;
            this.jProgressBar1.setString(tabsDownloding + append);
            this.jProgressBar1.setVisible(true);
            this.jLabel1.setVisible(false);
        }
    }
}
