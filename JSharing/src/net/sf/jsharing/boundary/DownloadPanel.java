/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DownloadPanel.java
 *
 * Created on 4 Nov, 2010, 10:36:57 PM
 */

package net.sf.jsharing.boundary;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jsharing.components.FileInfo;
import net.sf.jsharing.components.RequestPanel;
import net.sf.jsharing.components.SavedIPInfo;
import net.sf.jsharing.components.TransferrableObject;
import net.sf.jsharing.components.UsefulMethods;
import net.sf.jsharing.network.Client;
import net.sf.jsharing.network.NetworkActivity;
import org.apache.log4j.Level;
import pratikabu.threading.AbstractThread;
import pratikabu.threading.implementation.UninterruptibleThread;

/**
 *
 * @author Pratik
 */
public class DownloadPanel extends RequestPanel implements Runnable, NetworkActivity {
    private File saveToFile;
    private AbstractThread tDownload;
    private Client client;

    private int downloadCounter = 0, totalFiles;

    /** Creates new form DownloadPanel */
    public DownloadPanel(TransferrableObject to) {
        super(to);
        initComponents();

        resizeTable();
        populateTO();
        populateLastSaveLocation();
        requestToggle(false);

        Toolkit.getDefaultToolkit().beep();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jProgressBar2 = new javax.swing.JProgressBar();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();

        jMenuItem1.setMnemonic('C');
        jMenuItem1.setText("Copy");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jLabel2.setText("<IP>");

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Download Selected");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/jsharing/resources/add.gif"))); // NOI18N
        jButton7.setToolTipText("Save this IP to list.");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel1.setText("Request From:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(new java.awt.CardLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "File Name", "Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);

        jButton4.setText("Select All");

        jButton5.setText("Deselect All");

        jLabel4.setText("Size:");

        jLabel5.setText("0.0 KB");

        jButton2.setText("...");
        jButton2.setFocusable(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);

        jLabel3.setText("Save To:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jPanel1.add(jPanel2, "card1");

        jLabel6.setText("Download Progress Information:");

        jProgressBar2.setToolTipText("Download Progress");
        jProgressBar2.setString("Empty");
        jProgressBar2.setStringPainted(true);

        jLabel7.setText("Downloading:");

        jLabel8.setText("<Current File Name>");

        jLabel9.setText("Status:");

        jLabel10.setText("<What's client doing.>");

        jLabel11.setText("Saving to:");

        jButton6.setText("Open Folder");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);
        jTextField2.setText("<Folder Location>");
        jTextField2.setToolTipText("Folder location where all the downloads will be saved.");
        jTextField2.setComponentPopupMenu(jPopupMenu1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)))
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(99, 99, 99)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addContainerGap())
        );

        jPanel1.add(jPanel3, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2))
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(jButton1.getText().equals("Close")) {
            NewRequestDialog.getNewRequestDialog().removePopupPanel(this.getPopupPanel());
            DownloadDialog.getDD().removePanel(this);
            NewRequestDialog.getNewRequestDialog().removeRequestPanel(this);
        } else if(jButton1.getText().equals("Stop")) {
            client.setContinueDownload(false);
            jButton1.setEnabled(false);
        }
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int status = jfc.showOpenDialog(this);

        if(status == JFileChooser.APPROVE_OPTION)
            saveAndLoadSaveLocation(jfc.getSelectedFile());
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        requestToggle(true);
        jButton3.setEnabled(false);
        ((CardLayout)jPanel1.getLayout()).show(jPanel1, "card2");
        jTextField2.setText(UsefulMethods.getLastSavedLocation());
        tDownload = new UninterruptibleThread(this, "Sending List to: " + to.getServerAddress().getHostAddress() + ", " + to.getPortNumber());
        tDownload.start();
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        SavedIPInfo sip = new SavedIPInfo();
        sip.setName(to.getComputerName());
        sip.setIp(to.getServerAddress().getHostAddress());
        sip.setPort(to.getPortNumber());

        if(SavedIPInfoDialog.showSavedIPInfoDialog(DownloadDialog.getDD(), sip)) {
            loadIPInfo();
            MainWindow.mw.loadSavedIPs();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(new File(UsefulMethods.getLastSavedLocation()));
            } catch(IOException e) {
                JOptionPane.showMessageDialog(this, "Following error occurred while opening:\n"
                        + e.getMessage(), "Cannot Open", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Your system does not support this operation.", "Cannot Open", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        jTextField2.selectAll();
        jTextField2.copy();
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void populateTO() {
        if(to != null) {
            loadIPInfo();

            long totalSize = 0;
            for(FileInfo fi : to.getFiles()) {
                totalSize += fi.getSize();
                ((DefaultTableModel)jTable1.getModel()).addRow(getDetails(fi));
            }
            jLabel5.setText(UsefulMethods.getFileSize(totalSize));
        }
    }

    /**
     * resize the table
     */
    private void resizeTable() {
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.getParent().setBackground(Color.WHITE);
        //rezise
        int size = 20;

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(size);
        size = 200;
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(size);
        size = 75;
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(size);
    }

    private Object[] getDetails(FileInfo fi) {
        Object[] objarr = new Object[3];
        objarr[0] = true;
        objarr[1] = fi.getFileName();
        objarr[2] = fi.getSizeFormatted();

        return objarr;
    }

    private void prepareDownloadFiles() {
        int i = 0;
        sendToServer.getFiles().clear();
        for(FileInfo fi : to.getFiles()) {
            boolean selected = (Boolean)jTable1.getValueAt(i, 0);
            if(selected)
                sendToServer.getFiles().add(fi);
            i++;
        }
    }

    private void downloadFiles() {
        totalFiles = sendToServer.getFiles().size();
        jProgressBar2.setMaximum(totalFiles);
        sendToServer.setTaskType(UsefulMethods.DOWNLOAD_FILES);
        message("Initializing client.");
        client = new Client(sendToServer.getServerAddress(), sendToServer.getPortNumber(), this);
        client.setOutputDirectory(saveToFile);
        try{
            message("Triggering client.");
            client.triggerServerTask(sendToServer);
        } catch(IOException e) {
            String msg = "The system encountered problem while downloading files from Server.";
            UsefulMethods.log.log(Level.ERROR, msg, e);//exception logged in the logger
            JOptionPane.showMessageDialog(this, msg + "\n"
                    + "The system replied with: "
                    + e.getLocalizedMessage(), "Error while Downloading", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateLastSaveLocation() {
        saveToFile = new File(UsefulMethods.getLastSavedLocation());
        jTextField1.setText(saveToFile.getAbsolutePath());
    }

    private void saveAndLoadSaveLocation(File file) {
        //save to properties
        UsefulMethods.props.setProperty(UsefulMethods.P_LAST_SAVE_LOCATION, file.getAbsolutePath());
        populateLastSaveLocation();
    }

    public void run() {
        prepareDownloadFiles();

        if(sendToServer.getFiles().isEmpty()) {
            JOptionPane.showMessageDialog(DownloadDialog.getDD(), "Atleast one file must be selected to continue.");
            return;
        }

        startTabActivity();
        downloadFiles();
        requestToggle(false);
        stopTabActivity();
    }

    private void requestToggle(boolean b) {
        if(b) {
            jButton1.setText("Stop");
        } else {
            jButton1.setText("Close");
        }
    }

    private void loadIPInfo() {
        String ipAddress = to.getServerAddress().getHostAddress();
        String shortName = to.getComputerName();
        if(UsefulMethods.isIPSaved(ipAddress)) {
            shortName = UsefulMethods.getShortNameOfIP(ipAddress);
            jButton7.setVisible(false);
        }

        this.jLabel2.setText(shortName + ", " + ipAddress + ", " + to.getPortNumber());
    }

    public void message(String msg) {
        this.jLabel10.setText(msg);
        UsefulMethods.clientConsole.appendLog(msg);

        if(msg.equals("Downloading Completed.")) {
            jProgressBar2.setString(msg);
        }
    }

    public void processingFile(String fileName) {
        jLabel8.setText(fileName);
        downloadCounter++;
        jProgressBar2.setString("Downloading " + downloadCounter + "/" + totalFiles + " Files");
        jProgressBar2.setValue(downloadCounter);

        UsefulMethods.clientConsole.appendLog(fileName);
    }

    private void startTabActivity() {
        DownloadDialog.getDD().startDownloading(this);
    }

    private void stopTabActivity() {
        DownloadDialog.getDD().stopDownloading(this);
    }
}